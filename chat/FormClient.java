/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trabalho_1.chat;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author Avell B155 MAX
 */
public class FormClient extends javax.swing.JFrame {

    /**
     * Creates new form FormClient
     */
    //TCP
    private BufferedReader in;
    private PrintWriter out;
    //UDP
    private DatagramSocket aSocket;
    private DatagramPacket request;

    public FormClient() {
        initComponents();
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_users = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        txa_received = new javax.swing.JTextArea();
        btn_send = new javax.swing.JButton();
        btn_connect = new javax.swing.JButton();
        txf_message = new javax.swing.JTextField();
        txf_address = new javax.swing.JTextField();
        txf_port = new javax.swing.JTextField();
        txf_nick = new javax.swing.JTextField();
        lbl_Nick = new javax.swing.JLabel();
        lbl_Endereco = new javax.swing.JLabel();
        lbl_Porta = new javax.swing.JLabel();
        lbl_Conectados = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        rb_TCP = new javax.swing.JRadioButton();
        rb_UDP = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        list_users.setEnabled(false);
        list_users.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list_usersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(list_users);

        txa_received.setColumns(20);
        txa_received.setRows(5);
        txa_received.setEnabled(false);
        txa_received.setFocusable(false);
        jScrollPane2.setViewportView(txa_received);

        btn_send.setText("Enviar");
        btn_send.setEnabled(false);
        btn_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sendActionPerformed(evt);
            }
        });

        btn_connect.setText("Conectar");
        btn_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_connectActionPerformed(evt);
            }
        });

        txf_message.setToolTipText("");
        txf_message.setEnabled(false);
        txf_message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txf_messageActionPerformed(evt);
            }
        });

        lbl_Nick.setText("Nick:");

        lbl_Endereco.setText("Endereço:");

        lbl_Porta.setText("Porta:");

        lbl_Conectados.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_Conectados.setText("Conectados");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de Conexão"));

        buttonGroup1.add(rb_TCP);
        rb_TCP.setSelected(true);
        rb_TCP.setText("TCP");

        buttonGroup1.add(rb_UDP);
        rb_UDP.setText("UDP");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rb_TCP)
                .addGap(18, 18, 18)
                .addComponent(rb_UDP)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rb_TCP)
                    .addComponent(rb_UDP)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txf_message, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_send, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                            .addComponent(lbl_Conectados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_Nick)
                            .addComponent(lbl_Endereco))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txf_nick, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(txf_address))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_Porta)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txf_port, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn_connect))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txf_nick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_Nick)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_connect)
                    .addComponent(txf_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txf_address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_Endereco)
                    .addComponent(lbl_Porta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_Conectados)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_send)
                    .addComponent(txf_message, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_connectActionPerformed
        if (rb_TCP.isSelected()) {
            new SenderTCP().start();
        } else {
            new SenderUDP().start();
        }
    }//GEN-LAST:event_btn_connectActionPerformed

    private void btn_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sendActionPerformed
        if (rb_TCP.isSelected()) {
            this.out.println(txf_message.getText());
        } else {
            byte[] m = (txf_message.getText()).getBytes();
            request.setData(m);
            try {
                aSocket.send(request);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        this.txf_message.setText("");
    }//GEN-LAST:event_btn_sendActionPerformed

    private void list_usersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_usersMouseClicked
        txf_message.setText("/m " + list_users.getSelectedValue() + " ");
        txf_message.requestFocus();
    }//GEN-LAST:event_list_usersMouseClicked

    private void txf_messageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txf_messageActionPerformed
        btn_sendActionPerformed(evt);
    }//GEN-LAST:event_txf_messageActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (rb_UDP.isSelected()) {
            byte[] m = ("/b").getBytes();
            try {
                request.setData(m);
                aSocket.send(request);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormClient().setVisible(true);
            }
        });

    }

    /**
     * Classe responsável pela comunicação UDP
     */
    private class SenderTCP extends Thread {

        @Override
        public void run() {
            Socket socket = null;
            try {
                String serverAddress = txf_address.getText();
                socket = new Socket(serverAddress, Integer.parseInt(txf_port.getText()));
                txf_address.setEnabled(false);
                txf_port.setEnabled(false);
                btn_connect.setEnabled(false);
                rb_TCP.setEnabled(false);
                rb_UDP.setEnabled(false);

                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);

                // Process all messages from server, according to the protocol.
                //Receiver r = new Receiver(out);
                int cont = 0;
                while (true) {
                    //Pegou info do servidor
                    String line = in.readLine();
                    System.out.println(line);
                    try {
                        if (line.startsWith("SUBMITNAME")) {
                            String s = null;
                            if (cont == 0) {
                                s = txf_nick.getText();
                                cont++;
                            }
                            while (s == null || s.equals("")) {
                                s = JOptionPane.showInputDialog(null, "Nick em uso ou inválido insira outro", "ERRO", JOptionPane.YES_OPTION);
                            }
                            out.println(s);
                        } else if (line.startsWith("NAMEACCEPTED")) {
                            //textField.setEditable(true);
                            txf_message.setEnabled(true);
                            txf_nick.setEnabled(false);
                            txa_received.setEnabled(true);
                            list_users.setEnabled(true);
                            btn_send.setEnabled(true);
                            //r.start();
                        } else if (line.startsWith("MESSAGE")) {
                            txa_received.append(line.substring(8) + "\n");
                        } else if (line.startsWith("USERS")) {
                            list_users.setListData(line.substring(6).split(";"));
                        }
                    } catch (Exception e) {
                        System.out.println("Erro de Conexão");
                        txf_message.setEnabled(false);
                        txf_nick.setEnabled(true);
                        txa_received.setEnabled(false);
                        txa_received.setText("");
                        list_users.setEnabled(false);
                        list_users.setListData(new String[0]);
                        btn_send.setEnabled(false);

                        txf_address.setEnabled(true);
                        txf_port.setEnabled(true);
                        btn_connect.setEnabled(true);

                        rb_TCP.setEnabled(true);
                        rb_UDP.setEnabled(true);
                        return;
                    }
                }
            } catch (Exception ex) {
            } finally {
                if (socket != null) {
                    try {
                        socket.close();
                    } catch (IOException ex) {
                        Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }

    /**
     * Classe responsável pela comunicação TCP
     */
    private class SenderUDP extends Thread {

        @Override
        public void run() {
            aSocket = null;
            try {
                aSocket = new DatagramSocket();
                InetAddress aHost = InetAddress.getByName(txf_address.getText());
                int serverPort = Integer.parseInt(txf_port.getText());

                String message = "CONNECT " + txf_nick.getText();
                byte[] m = message.getBytes();
                request = new DatagramPacket(m, m.length, aHost, serverPort);
                aSocket.send(request);

                String line;
                while (true) {
                    byte[] buffer = new byte[1024];
                    DatagramPacket reply = new DatagramPacket(buffer, buffer.length);
                    aSocket.receive(reply);
                    line = new String(reply.getData(), 0, reply.getLength());
                    System.out.println(line);

                    if (line.startsWith("SUBMITNAME")) {
                        String s = null;
                        do {
                            s = JOptionPane.showInputDialog("Nick em uso ou nulo, insira outro");
                        } while (s == null || s.equals(""));
                        m = ("CONNECT " + s).getBytes();
                        txf_nick.setText(s);
                        request.setData(m);
                        aSocket.send(request);
                    } else if (line.startsWith("NAMEACCEPTED")) {
                        //bloqueando as coisas
                        txf_address.setEnabled(false);
                        txf_port.setEnabled(false);
                        btn_connect.setEnabled(false);
                        txf_message.setEnabled(true);
                        txf_nick.setEnabled(false);
                        rb_TCP.setEnabled(false);
                        rb_UDP.setEnabled(false);
                        txa_received.setEnabled(true);
                        list_users.setEnabled(true);
                        btn_send.setEnabled(true);
                    } else if (line.startsWith("MESSAGE")) {
                        line = line.substring(8);
                        if (line.equals("Voce saiu")) {
                            //Desbloqueando as coisas
                            txf_message.setEnabled(false);
                            txf_nick.setEnabled(true);
                            txa_received.setEnabled(false);
                            txa_received.setText("");
                            list_users.setEnabled(false);
                            list_users.setListData(new String[0]);
                            btn_send.setEnabled(false);

                            txf_address.setEnabled(true);
                            txf_port.setEnabled(true);
                            btn_connect.setEnabled(true);
                            rb_TCP.setEnabled(true);
                            rb_UDP.setEnabled(true);
                            break;
                        }
                        txa_received.append(line + "\n");
                    } else if (line.startsWith("USERS")) {
                        list_users.setListData(line.substring(6).split(";"));
                    }
                }
            } catch (SocketException e) {
                System.out.println("Socket: " + e.getMessage());
            } catch (IOException e) {
                System.out.println("IO: " + e.getMessage());
            } catch (NumberFormatException e) {
                System.out.println("NUMBER: " + e.getMessage());
            } finally {
                if (aSocket != null) {
                    //Fechando o socket
                    aSocket.close();
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_connect;
    private javax.swing.JButton btn_send;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_Conectados;
    private javax.swing.JLabel lbl_Endereco;
    private javax.swing.JLabel lbl_Nick;
    private javax.swing.JLabel lbl_Porta;
    private javax.swing.JList<String> list_users;
    private javax.swing.JRadioButton rb_TCP;
    private javax.swing.JRadioButton rb_UDP;
    private javax.swing.JTextArea txa_received;
    private javax.swing.JTextField txf_address;
    private javax.swing.JTextField txf_message;
    private javax.swing.JTextField txf_nick;
    private javax.swing.JTextField txf_port;
    // End of variables declaration//GEN-END:variables
}
